allalphabets:--
#check if all alphabets present 
st="the 4quick br$^own foENDx jumps over the lazy dog"
c=0
s=set(st)
'''s=set(str)
if len(s)==27:
    print("yes")
else:
    print("no")'''

for i in s:
    if i.islower():
        c=c+1
if(c==26):
    print("yes")
else:
    print("no")
----------------------------------------------------------------------
arrange3in ascending:--
# input:1 4 2 7 4 6 9 7
#output:[1, 2, 4, 4, 6, 7, 7, 9]
a=list(map(int,input().split()))
for i in range(len(a)-2):
    if(a[i]>a[i+1]):
        a[i],a[i+1]=a[i+1],a[i]
        
    if(a[i+1]>a[i+2]):
        a[i+1],a[i+2]=a[i+2],a[i+1]
        
    if(a[i]>a[i+1]):
        a[i],a[i+1]=a[i+1],a[i]
print(a)
    --------------------------------------------------------------------
trees:--
#inorder
'''class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def inorder_traversal(root):
    result = []
    
    def traverse(node):
        if node is not None:
            traverse(node.left)        # Visit left subtree
            result.append(node.value)  # Visit root
            traverse(node.right)       # Visit right subtree

    traverse(root)
    return result

# Example usage:
# Constructing the following binary tree:
#        1
#       / \
#      2   3
#     / \
#    4   5

# Creating tree nodes
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

# Performing inorder traversal
print(inorder_traversal(root))  # Output: [4, 2, 5, 1, 3]'''




class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def insert_into_bst(root, value):
    if root is None:
        return TreeNode(value)
    
    if value < root.value:
        root.left = insert_into_bst(root.left, value)
    else:
        root.right = insert_into_bst(root.right, value)
    
    return root

def preorder_traversal(root):
    result = []
    
    def traverse(node):
        if node is not None:
            result.append(node.value)  # Visit root
            traverse(node.left)        # Visit left subtree
            traverse(node.right)       # Visit right subtree

    traverse(root)
    return result

# Example usage:
# Constructing the BST by inserting values

values = [10, 5, 15, 3, 7, 13, 18]
root = None
for value in values:
    root = insert_into_bst(root, value)

# Performing preorder traversal to print the BST
print(preorder_traversal(root))  # Output: [10, 5, 3, 7, 15, 13, 18]
-------------------------------------------------------------------------------
treesburning:--
"""
ip: 6
    0 1 1 1 0 1
    0 1 0 1 0 0
    1 0 1 1 0 0 
    0 0 0 1 1 1
    1 1 0 0 0 1 
    1 1 1 0 1 0 
    4 6

op: 8
"""

def fun(l,i,j,n): 
    if(i<0 or j<0 or i>=n or j>=n or l[i][j]!=1):
        return
    if l[i][j]==1:
        l[i][j]=2
    fun(l,i-1,j,n)
    fun(l,i,j-1,n)
    fun(l,i+1,j,n)
    fun(l,i,j+1,n)
    return 

n=int(input())
l=[]
co=0
for i in range(n):
    l1=[]
    for j in range(n):
        l1.append(int(input()))
    l.append(l1)
r=int(input())
c=int(input())  
fun(l,r-1,c-1,n) 
for i in range(n):
    for j in range(n):
        if l[i][j]==1:
            co=co+1
print(l)
print("Trees:",co)
