coprime:--
'''n1=int(input())
n2=int(input())
l=[]
l2=[]
for i in range(1,n1+1):
    if n1%i==0:
        l.append(i)
print(l)
for j in range(1,n2+1):
    if n2%j==0:
        l2.append(j)
print(l2)'''


a=7
b=8
for i in range(2,(min(a,b)//2)+1):
    if a%i==0 and b%i==0:
        print("not co prime")
        break
else:
    print("coprime")
--------------------------------------------------------------------------------------------------
factors:--
n=int(input())
k=int(input())
l=[]
for i in range(1,n+1):
    if n%i==0:
        l.append(i)
if(len(l)>k):
    print(l[-k])
else:
    print("--")
-----------------------------------------------------------------------
majorityelement:--

'''l=[4,8,2,4,4,8,4]
l.sort()
x=len(l)
print(l[x//2])'''
a=[1,1,2,1,1,3]
c=1
p=a[0]
for i in range(1,len(a)):
    if(a[i]==p):
        c=c+1
    else:
        c=c-1
        if(c==0):
            c=1
            p=a[i]
print(p)
---------------------------------------------------------
swaplist:--
class node:
    def __init__(self,x):
        self.data=x
        self.next=None
class dll:
    def __init__(self):
        self.head=None
        self.tail=None
    def addback(self,x):
        if self.head==None:
            self.head=node(x)
            self.tail=self.head
        else:
            t=node(x)
            self.tail.next=t
            t.prev=self.tail
            self.tail=self.tail.next
    def addfront(self,x):
        if(self.head==None):
            self.head=node(x)
            self.tail=self.head
        else:
            t=node(x)
            t.next=self.head
            self.head.prev=t
            self.head=t
    def searching(self,x):
        t=self.head
        t1=self.tail
        while(t!=t1 and t!=t1.next):
            if(t.data==x or t1.data==x):
                return 1
            t=t.next
            t1=t1.prev
        if(t.data==x):
            return 1
        else:
            return 0
    def findleng(self):
        t=self.head
        t1=self.tail
        while(t!=t1 and t!=t1.next):
            t=t.next
            t1=t1.prev
        if(t==t1):
            print("Odd")
        else:
            print("Even")
        
    def display(self):
        t=self.head
        while(t!=None):
            print(t.data,end="->")
            t=t.next
        print()
    def palindrome(self):
        t=self.head
        t1=self.tail
        while(t!=t1 and t!=t1.next):
            if(t.data!=t1.data):
                return "no"
            t=t.next
            t1=t1.prev
        return "pal"
    def halfprint(self):
        f=self.head
        s=self.head
        while(f!=None):
            f=f.next.next
            s=s.next
        t=self.head
        t1=s
        while(t1!=None):
            t.data,t1.data=t1.data,t.data
            t=t.next
            t1=t1.next
    def swapping(self):
        
        
        
        
            
            
            
            
            
l1=dll()
l1.addback(90)
l1.addback(10)
l1.addback(20)
l1.addfront(30)
l1.findleng()
print(l1.searching(30))
l1.display()
print(l1.palindrome())
l1.halfprint()
l1.display()

        
        
